# Create a stateful set, which will create two instances (pods) of Keycloak
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-statefulset
  labels:
    app: keycloak
spec:
  # The number of instances (pods) of keycloak to create.
  replicas: 2
  serviceName: keycloak-set
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      # This script will auto-create a MSSQL database for keycloak if missing
      # before we attempt to start keycloak
      initContainers:
        - name: keycloak-db-setup
          image: mcr.microsoft.com/mssql-tools
          command: 
            - sh
            - -c
            - |
              until /opt/mssql-tools/bin/sqlcmd -S mssql-service -U sa -P "Password!23" -Q "create database keycloak"; do sleep 5; done
      # Create our keycloak instances
      containers:
        - name: keycloak
          imagePullPolicy: IfNotPresent
          image: quay.io/keycloak/keycloak:22.0.4
          env:
            - name: KEYCLOAK_ADMIN
              value: 'admin'
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: 'admin'
            - name: KC_HEALTH_ENABLED
              value: 'true'
            - name: KC_METRICS_ENABLED
              value: 'true'
            - name: KC_CACHE_METRICS_HISTOGRAMS_ENABLED
              value: 'true'
            - name: KC_PROXY
              value: 'edge'
            # Disable strict hostname setting so we can connect directly to
            # the keycloak pod in cluster_test.yaml
            - name: KC_HOSTNAME_STRICT
              value: 'false'
            - name: KC_DB
              value: 'mssql'
            - name: KC_DB_URL
              value: >-
                jdbc:sqlserver://mssql-service:1433;databaseName=keycloak;encrypt=false
            - name: KC_DB_USERNAME
              value: 'sa'
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD 
            # Must disable for mssql
            - name: KC_TRANSACTION_XA_ENABLED
              value: 'false'
            - name: KC_LOG_LEVEL
              value: 'INFO,org.infinispan:DEBUG,org.jgroups:DEBUG'
          ports:
            - containerPort: 8080
          # We're going to use 'start', instead of 'start-dev'
          # This should automatically trigger a new build
          args: ["start"]
          # Setup probes
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 30
            timeoutSeconds: 2
            initialDelaySeconds: 25
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8080
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 2
            initialDelaySeconds: 30
---

# Create a service so we can connect to keycloak on port 8080
# This will create a load-balancer in front of all keycloak instances, 
# and accessing Keycloak through this service will direct us to one of 
# our instances.
apiVersion: v1
kind: Service
metadata:
  name: keycloak-service
spec:
  selector:
    app: keycloak
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP
---

# Create a DNS entry that will route traffic to our keycloak instances,
# allowing us to connect to keycloak from outside the openshift cluster.
# This will work as a load balancer, so there's no telling which one of
# the two instances of keycloak we'll get.
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: keycloak-route
spec:
  # DNS name that we can use externally to access keycloak
  host: no-ha-keycloak.apps-crc.testing
  path: /
  to:
    kind: Service
    name: keycloak-service
  port:
    targetPort: 8080
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
